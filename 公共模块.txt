*** Settings ***
Library           Selenium2Library
Library           DateTime
Library           PepExt.py
Library           re
Library           Collections
Library           TestDataLib.py

*** Variables ***
${PEP_URL}        http://inworktest.yunfangdata.com:82/    # 评E评URL地址
${USER_NAME}      李楠    # 全局用户名
${PASSWORD}       123456    # 登录密码

*** Keywords ***
登录
    打开网页
    Input Text    xpath=//*[@id="username"]    ${USER_NAME}
    Input Text    xpath=//*[@id="password"]    ${PASSWORD}
    click Button    xpath=//button[contains(.,'登录')]
    Wait Until Page Contains    修改密码    30
    Comment    ${用户名}    get text    xpath=.//i[contains(@class,'user-name')]/..
    Comment    should Be Equal    ${用户名}    ${USER_NAME}

打开网页
    Open Browser    ${PEP_URL}    chrome
    Maximize Browser Window

等待加载完毕
    Set Selenium Speed    0.5s
    Wait Until Page Contains Element    xpath=//*[@id="LoadingBG" and @style="display: none;"]    timeout=30s
    Wait Until Page Contains Element    xpath=//*[@id="load_Tips" and contains(@style,"display: none")]    timeout=30s

等待列表创建完毕
    [Arguments]    ${transaction_name}=None    # 事务名称
    Run Keyword If    '${transaction_name}'!='None'    Transaction Start    ${transaction_name}
    Wait Until Page Does Not Contain Element    xpath=//*[@class="datagrid-mask" and contains(@style,"display:block")]    timeout=30s
    Run Keyword If    '${transaction_name}'!='None'    Transaction End    ${transaction_name}

等待提示框出现
    Wait Until Page Contains Element    xpath=.//div[contains(@class,"messager-window") and contains(@style,"display: block")]    100s

等待弹出窗口出现
    Wait Until Page Contains Element    xpath=//*[contains(@id,'xubox_iframe')]    100s
    select Frame    xpath=//iframe[contains(@id,"xubox_iframe")]

打开功能模块
    [Arguments]    ${主模块}    ${子模块}
    Set Selenium Speed    0.5s
    ${count}    Get Matching Xpath Count    //div[contains(.,'${主模块}')]/span[@class="arrow down"]
    Run Keyword If    '${count}'=='1'    Click Element    xpath=//div[contains(.,'${主模块}')]/span[2]
    Wait Until Page Does Not Contain Element    xpath=.//ul[@class="menu" and @style="display: none;"]//a[text()="${子模块}"]    timeout=10s
    Click Element    //a[contains(.,'${子模块}')]

关闭功能模块
    [Arguments]    ${模块名称}
    Click Element    xpath=.//*[@id='framecenter']/div[@class="l-tab-links"]//a[text()="${模块名称}"]/../div[@class="l-tab-links-item-close"]

文本框清空并输入
    [Arguments]    ${locator}    ${text}
    Clear Element Text    xpath=${locator}
    Input Text    xpath=${locator}    ${text}

点击提示框中的${button_name}按钮
    Click Element    xpath=//div[contains(@class,"messager-window")]//span[text()="${button_name}"]/ancestor::a

获取当前时间
    [Arguments]    ${format}=%Y%m%d%H%M%S%f
    [Documentation]    根据输入的格式返回指定格式的时间，默认格式为%Y%m%d%H%M%S%f
    ${time}    Get Current Date    result_format=${format}
    [Return]    ${time}

切换到${sub_model_name}子模块
    Click Element    xpath=.//span[text()="${sub_model_name}"]/ancestor::a

页数
    [Arguments]    ${总共多少条[0]}    ${列表数目显示模式}
    ${页数}    Evaluate    ${总共多少条[0]}/${列表数目显示模式}

点击查询按钮
    [Arguments]    ${is_panel}=1    #是否是tab下的查询按钮
    [Documentation]    点击查询按钮操作，用于带有tab的模块（可能会存在多个查询按钮的情况），
    ...    如内业分配、外业分配，该方法只点击当前可以看见的查询按钮
    ...
    ...    如果参数is_panle不为1时，可以应用在一个页面没有多个查询按钮的情况。
    Run Keyword If    ${is_panel}==1    Click Element    xpath=.//div[@class="panel" and contains(@style,"display: block")]//span[text()="查询"]/ancestor::a
    ...    ELSE    Click Element    xpath=.//span[text()="查询"]/ancestor::a
    #等待列表创建完毕

点击列表中的${buttun_name}按钮
    ${is_panel}    Get Matching Xpath Count    .//div[@class="panel" and contains(@style,"display: block")]//tr[@datagrid-row-index="0"]//a[text()="${buttun_name}"]
    Run Keyword If    ${is_panel} != 0    Click Element    xpath=.//div[@class="panel" and contains(@style,"display: block")]//tr[@datagrid-row-index="0"]//a[text()="${buttun_name}"]
    ...    ELSE    Click Element    xpath=.//tr[@datagrid-row-index="0"]//a[text()="${buttun_name}"]

初始化一个pep对象
    [Arguments]    ${dict}
    ${pep}    Create Pep Object    #创建一个pep对象
    ${keys}    Get Dictionary Keys    ${dict}    #获取所有key
    ${values}    Get Dictionary Values    ${dict}    #获取所有value
    @{user_list}    Create List    收费责任人    市场负责人    内部报单人    查勘人员    查勘人员
    : FOR    ${key}    ${value}    IN ZIP    ${keys}    ${values}
    \    ${count}    Get Match Count    ${user_list}    ${key}
    \    ${value}    Set Variable if    ${count}!=0    ${USER_NAME}    ${value}
    \    Set Pep Value    ${pep}    ${key}    ${value}
    [Return]    ${pep}

往输入框输入特殊字符并验证它是否出现警告
    [Arguments]    ${input_xpath}    ${match_xpath}    ${error_msg}=None    #传入输入框的xpath路径和警告的输入框样式
    Input Text    xpath=${input_xpath}    @!#
    ${count}    Get Matching Xpath Count    ${match_xpath}
    Run Keyword And Continue On Failure    Should Be Equal    ${count}    1    ${error_msg}

验证xpath路径匹配的数量
    [Arguments]    ${xpath}    ${match_count}    ${msg}=该xpath的路径匹配的数量不一致
    ${count}    Get Matching Xpath Count    ${xpath}
    Run Keyword And Continue On Failure    Should Be Equal    ${count}    ${match_count}    msg=${msg}

关闭浏览器_TestTeardown
    [Documentation]    当测试失败时，进行截图并关闭浏览器，该关键字只能用于Test Teardown，用到其他地方会报异常
    Run Keyword If Test Failed    Capture Page Screenshot
    Close Browser

获取提示框的提示信息
    ${msg}    Get Text    xpath=//div[contains(@class,"messager-body")]/div[2]
    [Return]    ${msg}

设置查询时间
    [Arguments]    ${input_date}    ${DropBtn_xpath}
    [Documentation]    输入：
    ...
    ...    1、${input_date}：输入的日期参数，格式为2016-2-3 ，个位数不补0，不能写为2016-02-03
    ...
    ...    2、${dropBtn_xpath}:日期控件的下拉按钮xpath路径
    Set Selenium Speed    0.5
    ${prevAndAfter}    Set Variable    0    #0表示向前翻，1表示向后翻
    ${base_path}    Set Variable    //div[@class='panel combo-p' and contains(@style,'display: block')]
    ${dict}    Create Dictionary    1=一月    2=二月    3=三月    4=四月    5=五月
    ...    6=六月    7=七月    8=八月    9=九月    10=十月    11=十一月
    ...    12=十二月
    ${prev_month}    Set Variable    ${base_path}//div[contains(@class,'calendar-prevmonth')]    #点击上一个月
    ${prev_year}    Set Variable    ${base_path}//div[contains(@class,'calendar-prevyear')]
    ${next_year}    Set Variable    ${base_path}//div[contains(@class,'calendar-nextyear')]
    ${next_month}    Set Variable    ${base_path}//div[contains(@class,'calendar-nextmonth')]
    ${input_date}    Set Variable    '${input_date}'.split('-')
    ${start_abbr}    Evaluate    ','.join(${input_date})    #匹配要点击开始哪天的abbr属性
    ${s_year}    Evaluate    ${input_date}[0]
    ${s_month}    Evaluate    ${input_date}[1]
    ${s_day}    Evaluate    ${input_date}[2]
    ${startDayPath}    Set Variable    ${base_path}//td[text()=${s_day} and @abbr='${start_abbr}']    #需要点击的开始day
    ${s_year}    Evaluate    int('${s_year}')
    ${s_month}    Evaluate    int('${s_month}')
    ${s_day}    Evaluate    int('${s_day}')
    Click Element    ${DropBtn_xpath}    #点击开始时间下拉按钮
    ${current_ym}    Set Variable    ${base_path}//div[contains(@class,'calendar-title')]/span    #当前年月
    ${yearAndMonthStr}    Get Text    ${current_ym}
    ${yearAndMonthArr}    Evaluate    u'${yearAndMonthStr}'.split(' ')
    ${current_year}    Evaluate    ${yearAndMonthArr}[1]
    ${current_month}    Evaluate    ${yearAndMonthArr}[0]
    ${year_no}    Evaluate    int('${current_year}')    #当前年份
    ${keys}    Get Dictionary Keys    ${dict}
    ${values}    Get Dictionary Values    ${dict}
    ${v_len}    Evaluate    len(${values})
    : FOR    ${i}    IN RANGE    ${v_len}
    \    ${temp}    Evaluate    ${values}[${i}]
    \    ${month_no}    Run Keyword If    '${current_month}'=='${temp}'    Evaluate    ${keys}[${i}]
    \    Exit For Loop If    '${current_month}'=='${temp}'
    ${month_no}    Evaluate    int('${month_no}')    #当前月份
    #确定要翻几年
    ${yearTurnCount}    Evaluate    ${s_year}-${year_no}
    ${prevAndAfter1}    Run Keyword If    ${yearTurnCount}>0    Set Variable    1
    ...    ELSE    Set Variable    0
    ${yearTurnCount}    Evaluate    abs(${yearTurnCount})
    #确定要翻几月
    ${monthTurnCount}    Evaluate    ${s_month}-${month_no}
    ${prevAndAfter2}    Run Keyword If    ${monthTurnCount}>0    Set Variable    1
    ...    ELSE    Set Variable    0
    ${monthTurnCount}    Evaluate    abs(${monthTurnCount})
    : FOR    ${i}    IN RANGE    ${yearTurnCount}
    \    Run Keyword If    ${prevAndAfter1}==0    Click Element    ${prev_year}
    \    ...    ELSE    Click Element    ${next_year}
    : FOR    ${i}    IN RANGE    ${monthTurnCount}
    \    Run Keyword If    ${prevAndAfter2}==0    Click Element    ${prev_month}
    \    ...    ELSE    Click Element    ${next_month}
    Click Element    ${startDayPath}

清空选择的日期
    [Arguments]    ${dropBtn_xpath}
    [Documentation]    输入：
    ...    1、${dropBtn_xpath}:日期控件的下拉按钮xpath路径
    Click Element    ${dropBtn_xpath}
    ${base_path}    Set Variable    //div[@class='panel combo-p' and contains(@style,'display: block')]
    Click Element    ${base_path}//a[text()='清空']

验证模糊查询后的列表数据
    [Arguments]    ${查询关键字}    ${列表模式}=1    ${选择框ID}=cb
    [Documentation]    该关键字适用于，模糊查询后对列表中的数据进行检查
    ...
    ...    1、由于模糊查询时，会对多个字段进行查询，所以查询出来的每条记录都需要包含查询关键字
    ...    2、评E评含有多种列表，该关键字定义了以下的列表模式：
    ...    0（没有标签页的列表，如：审核调度模块），1（含有标签页的列表，如外业分配模块）
    ${panel_value}    Set Variable If    ${列表模式}==1    //div[@class="panel" and contains(@style,"display: block")]    ${EMPTY}
    ${表格行数}    Get Matching Xpath Count    .${panel_value}//*[@class="datagrid-btable"]//tr[@datagrid-row-index]/td[@field="${选择框ID}"]/div
    Should Not Be Equal    '${表格行数}'    '0'    表格中没有查询到数据
    : FOR    ${row_num}    IN RANGE    ${表格行数}
    \    验证xpath路径匹配的数量    .${panel_value}//*[@class="datagrid-btable"]//tr[@datagrid-row-index]/td[@field="${选择框ID}"]/ancestor::tr[@datagrid-row-index="${row_num}"]/descendant::div[contains(text(),"${查询关键字}")]/ancestor::tr    1    该记录没有找到“${查询关键字}”的关键字

时间选择
    [Arguments]    ${newtime}    ${startime}    ${endtime}
    Assign Id To Element    xpath=.//*[@id='CreatedDate1']    new_time
    Assign Id To Element    xpath=.//*[@id='CreatedDate1From']    new_time1
    Assign Id To Element    xpath=.//*[@id='CreatedDate1To']    new_time2
    Execute JavaScript    window.document.getElementById('new_time').value='${newtime}'
    Execute JavaScript    window.document.getElementById('new_time1').value='${startime}'
    Execute JavaScript    window.document.getElementById('new_time1').value='${startime}'
    Execute JavaScript    window.document.getElementById('new_time2').value='${endtime}'
    Execute JavaScript    window.document.getElementById('new_time').removeAttribute("readonly")
